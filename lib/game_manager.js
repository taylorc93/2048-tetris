// Generated by CoffeeScript 1.7.1
(function() {
  var BOARD_HEIGHT, BOARD_WIDTH, MAX_COLOR_INDEX, MAX_COLS, MAX_ROWS, MAX_X, MAX_Y, SPAWN_THRESHOLD, TILE_SIZE;

  BOARD_WIDTH = 1200;

  BOARD_HEIGHT = 800;

  TILE_SIZE = 50;

  MAX_ROWS = BOARD_HEIGHT / TILE_SIZE;

  MAX_COLS = BOARD_WIDTH / TILE_SIZE;

  MAX_X = BOARD_WIDTH - TILE_SIZE;

  MAX_Y = BOARD_HEIGHT - TILE_SIZE;

  MAX_COLOR_INDEX = 6;

  SPAWN_THRESHOLD = 5;

  window.GameManager = (function() {
    function GameManager() {
      var col, row;
      this.tiles = (function() {
        var _i, _results;
        _results = [];
        for (row = _i = 0; 0 <= MAX_ROWS ? _i < MAX_ROWS : _i > MAX_ROWS; row = 0 <= MAX_ROWS ? ++_i : --_i) {
          _results.push((function() {
            var _j, _results1;
            _results1 = [];
            for (col = _j = 0; 0 <= MAX_COLS ? _j < MAX_COLS : _j > MAX_COLS; col = 0 <= MAX_COLS ? ++_j : --_j) {
              _results1.push(null);
            }
            return _results1;
          })());
        }
        return _results;
      })();
      this.renderer = new CanvasRenderer(document.getElementById('gameBoard'));
      this.ui = new UserInputLogger;
      this.spawn_counter = 0;
      row = MAX_ROWS - 1;
      col = Math.floor(Math.random() * MAX_COLS);
      this.tiles[row][col] = new Tile(row, col);
    }

    GameManager.prototype.render = function() {
      var count, tile, _i, _len, _ref, _results;
      this.renderer.clear();
      count = 0;
      _ref = this.allTiles();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tile = _ref[_i];
        _results.push(this.renderer.renderTile(tile));
      }
      return _results;
    };

    GameManager.prototype.spawnTile = function() {
      var col, row, tile;
      if (this.spawn_counter === SPAWN_THRESHOLD) {
        row = 0;
        col = Math.floor(Math.random() * MAX_COLS);
        tile = new Tile(row, col);
        this.tiles[row][col] = tile;
        this.updateNeighbors(tile);
        return this.spawn_counter = 0;
      } else {
        return this.spawn_counter++;
      }
    };

    GameManager.prototype.updatePositions = function() {
      var col, row, tile, _i, _j, _len, _len1, _ref, _ref1;
      _ref = this.allTiles();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tile = _ref[_i];
        if (tile.y !== MAX_Y && !tile.hasMoved) {
          if (tile.neighbors[1] === null) {
            row = tile.row;
            col = tile.col;
            this.tiles[row][col] = null;
            tile.row++;
            tile.y += TILE_SIZE;
            tile.hasMoved = true;
            this.tiles[row + 1][col] = tile;
          } else {
            tile.userCanMove = true;
          }
        }
      }
      _ref1 = this.allTiles();
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        tile = _ref1[_j];
        tile.hasMoved = false;
        this.updateNeighbors(tile);
      }
      if (this.ui.leftPressed) {
        this.moveLeft();
      }
      if (this.ui.rightPressed) {
        this.moveRight();
      }
      if (this.ui.downPressed) {
        return this.moveDown();
      }
    };

    GameManager.prototype.moveLeft = function() {
      var col, row, tile, _i, _len, _ref;
      _ref = this.allTiles();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tile = _ref[_i];
        if (tile.x !== 0 && !tile.hasMoved) {
          row = tile.row;
          col = tile.col;
          if (tile.neighbors[0] === null) {
            tile.col--;
            tile.x -= TILE_SIZE;
            tile.hasMoved = true;
            this.tiles[row][col - 1] = tile;
            this.tiles[row][col] = null;
          } else if (tile.neighbors[0].colorIndex === tile.colorIndex) {
            if (tile.colorIndex !== MAX_COLOR_INDEX) {
              this.tiles[row][col - 1].colorIndex++;
              this.tiles[row][col - 1].hasMoved = true;
              this.tiles[row][col] = null;
            }
          } else {
            continue;
          }
        }
      }
      this.render();
      return this.ui.leftPressed = false;
    };

    GameManager.prototype.moveRight = function() {
      var col, row, tile, _i, _len, _ref;
      _ref = this.allTiles();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tile = _ref[_i];
        if (tile.x !== MAX_X && !tile.hasMoved) {
          row = tile.row;
          col = tile.col;
          if (tile.neighbors[2] === null) {
            tile.col++;
            tile.x += TILE_SIZE;
            tile.hasMoved = true;
            this.tiles[row][col + 1] = tile;
            this.tiles[row][col] = null;
          } else if (tile.neighbors[2].colorIndex === tile.colorIndex) {
            if (tile.colorIndex !== MAX_COLOR_INDEX) {
              this.tiles[row][col + 1].colorIndex++;
              this.tiles[row][col + 1].hasMoved = true;
              this.tiles[row][col] = null;
            }
          } else {
            continue;
          }
        }
      }
      this.render();
      return this.ui.rightPressed = false;
    };

    GameManager.prototype.moveDown = function() {
      var col, row, tile, _i, _len, _ref;
      _ref = this.allTiles();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tile = _ref[_i];
        if (tile.y !== MAX_Y && !tile.hasMoved) {
          row = tile.row;
          col = tile.col;
          if (tile.neighbors[1] === null) {
            tile.row++;
            tile.y += TILE_SIZE;
            tile.hasMoved = true;
            this.tiles[row + 1][col] = tile;
            this.tiles[row][col] = null;
          } else if (tile.neighbors[1].colorIndex === tile.colorIndex) {
            if (tile.colorIndex !== MAX_COLOR_INDEX) {
              this.tiles[row + 1][col].colorIndex++;
              this.tiles[row + 1][col].hasMoved = true;
              this.tiles[row][col] = null;
            }
          } else {
            continue;
          }
        }
      }
      this.render();
      return this.ui.downPressed = false;
    };

    GameManager.prototype.allTiles = function() {
      var allTiles, col, row, _i, _j;
      allTiles = [];
      for (row = _i = 0; 0 <= MAX_ROWS ? _i < MAX_ROWS : _i > MAX_ROWS; row = 0 <= MAX_ROWS ? ++_i : --_i) {
        for (col = _j = 0; 0 <= MAX_COLS ? _j < MAX_COLS : _j > MAX_COLS; col = 0 <= MAX_COLS ? ++_j : --_j) {
          if (this.tiles[row][col] !== null) {
            allTiles.push(this.tiles[row][col]);
          }
        }
      }
      return allTiles;
    };

    GameManager.prototype.updateNeighbors = function(tile) {
      var col, row;
      row = tile.row;
      col = tile.col;
      tile.neighbors[0] = col > 0 ? this.tiles[row][col - 1] : null;
      tile.neighbors[1] = row < MAX_ROWS - 1 ? this.tiles[row + 1][col] : null;
      return tile.neighbors[2] = col < MAX_COLS - 1 ? this.tiles[row][col + 1] : null;
    };

    GameManager.prototype.spacePressed = function() {
      return console.log('pressed spacebar');
    };

    return GameManager;

  })();

}).call(this);
